                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.4 #11922 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module AD9833
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _AD_REG_VAL
                                     12 	.globl _AD_REG_ADDRESS
                                     13 	.globl _AD9833_WriteReg
                                     14 	.globl _AD9833_Init
                                     15 	.globl _AD9833_Reset
                                     16 	.globl _AD9833_SetFreq
                                     17 	.globl _AD9833_SetPhase
                                     18 	.globl _AD9833_SetMode
                                     19 ;--------------------------------------------------------
                                     20 ; ram data
                                     21 ;--------------------------------------------------------
                                     22 	.area DATA
                                     23 ;--------------------------------------------------------
                                     24 ; ram data
                                     25 ;--------------------------------------------------------
                                     26 	.area INITIALIZED
      000000                         27 _AD_REG_ADDRESS::
      000000                         28 	.ds 5
      000005                         29 _AD_REG_VAL::
      000005                         30 	.ds 10
                                     31 ;--------------------------------------------------------
                                     32 ; absolute external ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area DABS (ABS)
                                     35 
                                     36 ; default segment ordering for linker
                                     37 	.area HOME
                                     38 	.area GSINIT
                                     39 	.area GSFINAL
                                     40 	.area CONST
                                     41 	.area INITIALIZER
                                     42 	.area CODE
                                     43 
                                     44 ;--------------------------------------------------------
                                     45 ; global & static initialisations
                                     46 ;--------------------------------------------------------
                                     47 	.area HOME
                                     48 	.area GSINIT
                                     49 	.area GSFINAL
                                     50 	.area GSINIT
                                     51 ;--------------------------------------------------------
                                     52 ; Home
                                     53 ;--------------------------------------------------------
                                     54 	.area HOME
                                     55 	.area HOME
                                     56 ;--------------------------------------------------------
                                     57 ; code
                                     58 ;--------------------------------------------------------
                                     59 	.area CODE
                                     60 ;	./AD9833_reg.h: 12: static inline uint16_t calcPhase(float phase){return (uint16_t)((512.0 * (phase/10) / 45) + 0.5);}
                                     61 ;	-----------------------------------------
                                     62 ;	 function calcPhase
                                     63 ;	-----------------------------------------
      000000                         64 _calcPhase:
      000000 5F               [ 1]   65 	clrw	x
      000001 89               [ 2]   66 	pushw	x
      000002 4B 20            [ 1]   67 	push	#0x20
      000004 4B 41            [ 1]   68 	push	#0x41
      000006 1E 09            [ 2]   69 	ldw	x, (0x09, sp)
      000008 89               [ 2]   70 	pushw	x
      000009 1E 09            [ 2]   71 	ldw	x, (0x09, sp)
      00000B 89               [ 2]   72 	pushw	x
      00000C CDr00r00         [ 4]   73 	call	___fsdiv
      00000F 5B 08            [ 2]   74 	addw	sp, #8
      000011 89               [ 2]   75 	pushw	x
      000012 90 89            [ 2]   76 	pushw	y
      000014 5F               [ 1]   77 	clrw	x
      000015 89               [ 2]   78 	pushw	x
      000016 4B 00            [ 1]   79 	push	#0x00
      000018 4B 44            [ 1]   80 	push	#0x44
      00001A CDr00r00         [ 4]   81 	call	___fsmul
      00001D 5B 08            [ 2]   82 	addw	sp, #8
      00001F 4B 00            [ 1]   83 	push	#0x00
      000021 4B 00            [ 1]   84 	push	#0x00
      000023 4B 34            [ 1]   85 	push	#0x34
      000025 4B 42            [ 1]   86 	push	#0x42
      000027 89               [ 2]   87 	pushw	x
      000028 90 89            [ 2]   88 	pushw	y
      00002A CDr00r00         [ 4]   89 	call	___fsdiv
      00002D 5B 08            [ 2]   90 	addw	sp, #8
      00002F 4B 00            [ 1]   91 	push	#0x00
      000031 4B 00            [ 1]   92 	push	#0x00
      000033 4B 00            [ 1]   93 	push	#0x00
      000035 4B 3F            [ 1]   94 	push	#0x3f
      000037 89               [ 2]   95 	pushw	x
      000038 90 89            [ 2]   96 	pushw	y
      00003A CDr00r00         [ 4]   97 	call	___fsadd
      00003D 5B 08            [ 2]   98 	addw	sp, #8
      00003F 89               [ 2]   99 	pushw	x
      000040 90 89            [ 2]  100 	pushw	y
      000042 CDr00r00         [ 4]  101 	call	___fs2uint
      000045 5B 04            [ 2]  102 	addw	sp, #4
      000047 81               [ 4]  103 	ret
                                    104 ;	./AD9833_reg.h: 14: static inline uint32_t calcFreq(float freq){return (uint32_t)((freq * (1UL << 28)/AD_MCLK) + 0.5);}
                                    105 ;	-----------------------------------------
                                    106 ;	 function calcFreq
                                    107 ;	-----------------------------------------
      000048                        108 _calcFreq:
      000048 1E 05            [ 2]  109 	ldw	x, (0x05, sp)
      00004A 89               [ 2]  110 	pushw	x
      00004B 1E 05            [ 2]  111 	ldw	x, (0x05, sp)
      00004D 89               [ 2]  112 	pushw	x
      00004E 5F               [ 1]  113 	clrw	x
      00004F 89               [ 2]  114 	pushw	x
      000050 4B 80            [ 1]  115 	push	#0x80
      000052 4B 4D            [ 1]  116 	push	#0x4d
      000054 CDr00r00         [ 4]  117 	call	___fsmul
      000057 5B 08            [ 2]  118 	addw	sp, #8
      000059 4B 20            [ 1]  119 	push	#0x20
      00005B 4B BC            [ 1]  120 	push	#0xbc
      00005D 4B BE            [ 1]  121 	push	#0xbe
      00005F 4B 4B            [ 1]  122 	push	#0x4b
      000061 89               [ 2]  123 	pushw	x
      000062 90 89            [ 2]  124 	pushw	y
      000064 CDr00r00         [ 4]  125 	call	___fsdiv
      000067 5B 08            [ 2]  126 	addw	sp, #8
      000069 4B 00            [ 1]  127 	push	#0x00
      00006B 4B 00            [ 1]  128 	push	#0x00
      00006D 4B 00            [ 1]  129 	push	#0x00
      00006F 4B 3F            [ 1]  130 	push	#0x3f
      000071 89               [ 2]  131 	pushw	x
      000072 90 89            [ 2]  132 	pushw	y
      000074 CDr00r00         [ 4]  133 	call	___fsadd
      000077 5B 08            [ 2]  134 	addw	sp, #8
      000079 89               [ 2]  135 	pushw	x
      00007A 90 89            [ 2]  136 	pushw	y
      00007C CDr00r00         [ 4]  137 	call	___fs2ulong
      00007F 5B 04            [ 2]  138 	addw	sp, #4
      000081 81               [ 4]  139 	ret
                                    140 ;	AD9833.c: 5: void AD9833_WriteReg(uint8_t reg)
                                    141 ;	-----------------------------------------
                                    142 ;	 function AD9833_WriteReg
                                    143 ;	-----------------------------------------
      000082                        144 _AD9833_WriteReg:
      000082 52 03            [ 2]  145 	sub	sp, #3
                                    146 ;	AD9833.c: 7: uint8_t addr=AD_REG_ADDRESS[reg];
      000084 5F               [ 1]  147 	clrw	x
      000085 7B 06            [ 1]  148 	ld	a, (0x06, sp)
      000087 97               [ 1]  149 	ld	xl, a
      000088 D6u00u00         [ 1]  150 	ld	a, (_AD_REG_ADDRESS, x)
      00008B 6B 01            [ 1]  151 	ld	(0x01, sp), a
                                    152 ;	AD9833.c: 10: uint8_t byte0 = (uint8_t)( (addr|(uint8_t)(AD_REG_VAL[reg] >>8)));
      00008D 7B 06            [ 1]  153 	ld	a, (0x06, sp)
      00008F 5F               [ 1]  154 	clrw	x
      000090 97               [ 1]  155 	ld	xl, a
      000091 58               [ 2]  156 	sllw	x
      000092 1Cr00r05         [ 2]  157 	addw	x, #(_AD_REG_VAL + 0)
      000095 FE               [ 2]  158 	ldw	x, (x)
      000096 9E               [ 1]  159 	ld	a, xh
      000097 0F 02            [ 1]  160 	clr	(0x02, sp)
      000099 1A 01            [ 1]  161 	or	a, (0x01, sp)
      00009B 6B 03            [ 1]  162 	ld	(0x03, sp), a
                                    163 ;	AD9833.c: 11: uint8_t byte1 = (uint8_t)AD_REG_VAL[reg];
      00009D 90 93            [ 1]  164 	ldw	y, x
                                    165 ;	AD9833.c: 15: while(SPI_GetFlagStatus(SPI_FLAG_BSY));  //check to ensure SPI is ready before we begin.
      00009F                        166 00101$:
                                    167 ;	inc/stm8s_spi.h: 613: if ((SPI->SR & (uint8_t) SPI_FLAG) != (uint8_t) RESET) {
      00009F C6 52 03         [ 1]  168 	ld	a, 0x5203
      0000A2 2B FB            [ 1]  169 	jrmi	00101$
                                    170 ;	inc/stm8s_gpio.h: 296: GPIOx->ODR &= (uint8_t) (~PortPins);
      0000A4 72 17 50 00      [ 1]  171 	bres	20480, #3
                                    172 ;	inc/stm8s_spi.h: 476: SPI->DR = Data; /* Write in the DR register the data to be sent*/
      0000A8 AE 52 04         [ 2]  173 	ldw	x, #0x5204
      0000AB 7B 03            [ 1]  174 	ld	a, (0x03, sp)
      0000AD F7               [ 1]  175 	ld	(x), a
                                    176 ;	AD9833.c: 19: while(!SPI_GetFlagStatus(SPI_FLAG_TXE)); //wait until the buffer is empty before we add another byte to it
      0000AE                        177 00104$:
                                    178 ;	inc/stm8s_spi.h: 613: if ((SPI->SR & (uint8_t) SPI_FLAG) != (uint8_t) RESET) {
      0000AE C6 52 03         [ 1]  179 	ld	a, 0x5203
      0000B1 A5 02            [ 1]  180 	bcp	a, #0x02
      0000B3 27 F9            [ 1]  181 	jreq	00104$
                                    182 ;	inc/stm8s_spi.h: 476: SPI->DR = Data; /* Write in the DR register the data to be sent*/
      0000B5 AE 52 04         [ 2]  183 	ldw	x, #0x5204
      0000B8 90 9F            [ 1]  184 	ld	a, yl
      0000BA F7               [ 1]  185 	ld	(x), a
                                    186 ;	AD9833.c: 22: while(SPI_GetFlagStatus(SPI_FLAG_BSY));  //wait until SPI has finished transmitting before we release CS.
      0000BB                        187 00107$:
                                    188 ;	inc/stm8s_spi.h: 613: if ((SPI->SR & (uint8_t) SPI_FLAG) != (uint8_t) RESET) {
      0000BB C6 52 03         [ 1]  189 	ld	a, 0x5203
      0000BE 2B FB            [ 1]  190 	jrmi	00107$
                                    191 ;	inc/stm8s_gpio.h: 283: GPIOx->ODR |= (uint8_t) PortPins;
      0000C0 72 16 50 00      [ 1]  192 	bset	20480, #3
                                    193 ;	AD9833.c: 23: GPIO_WriteHigh(GPIOA, GPIO_PIN_3);
                                    194 ;	AD9833.c: 31: }
      0000C4 5B 03            [ 2]  195 	addw	sp, #3
      0000C6 81               [ 4]  196 	ret
                                    197 ;	AD9833.c: 33: void AD9833_Init(void)
                                    198 ;	-----------------------------------------
                                    199 ;	 function AD9833_Init
                                    200 ;	-----------------------------------------
      0000C7                        201 _AD9833_Init:
                                    202 ;	AD9833.c: 38: BITS_SET(AD_REG_VAL[AD_REG_CTL],(BIT(AD_CTL_RESET) | BIT(AD_CTL_B28)));
      0000C7 CEu00u05         [ 2]  203 	ldw	x, _AD_REG_VAL+0
      0000CA 9E               [ 1]  204 	ld	a, xh
      0000CB AA 21            [ 1]  205 	or	a, #0x21
      0000CD 95               [ 1]  206 	ld	xh, a
      0000CE CFu00u05         [ 2]  207 	ldw	_AD_REG_VAL+0, x
                                    208 ;	AD9833.c: 39: AD9833_WriteReg(AD_REG_CTL);
      0000D1 4B 00            [ 1]  209 	push	#0x00
      0000D3 CDr00r82         [ 4]  210 	call	_AD9833_WriteReg
      0000D6 84               [ 1]  211 	pop	a
                                    212 ;	AD9833.c: 40: }
      0000D7 81               [ 4]  213 	ret
                                    214 ;	AD9833.c: 42: void AD9833_Reset(bool reset)
                                    215 ;	-----------------------------------------
                                    216 ;	 function AD9833_Reset
                                    217 ;	-----------------------------------------
      0000D8                        218 _AD9833_Reset:
                                    219 ;	AD9833.c: 44: reset==1?BIT_SET(AD_REG_VAL[AD_REG_CTL],AD_CTL_RESET):\
      0000D8 7B 03            [ 1]  220 	ld	a, (0x03, sp)
      0000DA 4A               [ 1]  221 	dec	a
      0000DB 26 0C            [ 1]  222 	jrne	00103$
      0000DD CEu00u05         [ 2]  223 	ldw	x, _AD_REG_VAL+0
      0000E0 9E               [ 1]  224 	ld	a, xh
      0000E1 AA 01            [ 1]  225 	or	a, #0x01
      0000E3 95               [ 1]  226 	ld	xh, a
      0000E4 CFu00u05         [ 2]  227 	ldw	_AD_REG_VAL+0, x
      0000E7 20 0A            [ 2]  228 	jra	00104$
      0000E9                        229 00103$:
      0000E9 CEu00u05         [ 2]  230 	ldw	x, _AD_REG_VAL+0
      0000EC 9E               [ 1]  231 	ld	a, xh
      0000ED A4 FE            [ 1]  232 	and	a, #0xfe
      0000EF 95               [ 1]  233 	ld	xh, a
      0000F0 CFu00u05         [ 2]  234 	ldw	_AD_REG_VAL+0, x
      0000F3                        235 00104$:
                                    236 ;	AD9833.c: 46: AD9833_WriteReg(AD_REG_CTL);
      0000F3 4B 00            [ 1]  237 	push	#0x00
      0000F5 CDr00r82         [ 4]  238 	call	_AD9833_WriteReg
      0000F8 84               [ 1]  239 	pop	a
                                    240 ;	AD9833.c: 47: }
      0000F9 81               [ 4]  241 	ret
                                    242 ;	AD9833.c: 50: void AD9833_SetFreq(float frequency)
                                    243 ;	-----------------------------------------
                                    244 ;	 function AD9833_SetFreq
                                    245 ;	-----------------------------------------
      0000FA                        246 _AD9833_SetFreq:
      0000FA 52 04            [ 2]  247 	sub	sp, #4
                                    248 ;	AD9833.c: 54: uint32_t freqreg = calcFreq(frequency);
      0000FC 1E 09            [ 2]  249 	ldw	x, (0x09, sp)
      0000FE 16 07            [ 2]  250 	ldw	y, (0x07, sp)
      000100 89               [ 2]  251 	pushw	x
      000101 90 89            [ 2]  252 	pushw	y
      000103 5F               [ 1]  253 	clrw	x
      000104 89               [ 2]  254 	pushw	x
      000105 4B 80            [ 1]  255 	push	#0x80
      000107 4B 4D            [ 1]  256 	push	#0x4d
      000109 CDr00r00         [ 4]  257 	call	___fsmul
      00010C 5B 08            [ 2]  258 	addw	sp, #8
      00010E 4B 20            [ 1]  259 	push	#0x20
      000110 4B BC            [ 1]  260 	push	#0xbc
      000112 4B BE            [ 1]  261 	push	#0xbe
      000114 4B 4B            [ 1]  262 	push	#0x4b
      000116 89               [ 2]  263 	pushw	x
      000117 90 89            [ 2]  264 	pushw	y
      000119 CDr00r00         [ 4]  265 	call	___fsdiv
      00011C 5B 08            [ 2]  266 	addw	sp, #8
      00011E 4B 00            [ 1]  267 	push	#0x00
      000120 4B 00            [ 1]  268 	push	#0x00
      000122 4B 00            [ 1]  269 	push	#0x00
      000124 4B 3F            [ 1]  270 	push	#0x3f
      000126 89               [ 2]  271 	pushw	x
      000127 90 89            [ 2]  272 	pushw	y
      000129 CDr00r00         [ 4]  273 	call	___fsadd
      00012C 5B 08            [ 2]  274 	addw	sp, #8
      00012E 89               [ 2]  275 	pushw	x
      00012F 90 89            [ 2]  276 	pushw	y
      000131 CDr00r00         [ 4]  277 	call	___fs2ulong
      000134 5B 04            [ 2]  278 	addw	sp, #4
      000136 17 01            [ 2]  279 	ldw	(0x01, sp), y
                                    280 ;	AD9833.c: 63: AD_REG_VAL[AD_REG_FREQ0] = (uint16_t)(freqreg & 0x3FFF);
      000138 90 93            [ 1]  281 	ldw	y, x
      00013A 9E               [ 1]  282 	ld	a, xh
      00013B A4 3F            [ 1]  283 	and	a, #0x3f
      00013D 90 95            [ 1]  284 	ld	yh, a
      00013F 90 CFu00u07      [ 2]  285 	ldw	_AD_REG_VAL+2, y
                                    286 ;	AD9833.c: 64: AD9833_WriteReg(AD_REG_FREQ0);
      000143 89               [ 2]  287 	pushw	x
      000144 4B 01            [ 1]  288 	push	#0x01
      000146 CDr00r82         [ 4]  289 	call	_AD9833_WriteReg
      000149 84               [ 1]  290 	pop	a
      00014A 85               [ 2]  291 	popw	x
                                    292 ;	AD9833.c: 67: AD_REG_VAL[AD_REG_FREQ0] = (uint16_t)((freqreg>>14)&0x3FFF); 
      00014B 16 01            [ 2]  293 	ldw	y, (0x01, sp)
      00014D A6 0E            [ 1]  294 	ld	a, #0x0e
      00014F                        295 00104$:
      00014F 90 54            [ 2]  296 	srlw	y
      000151 56               [ 2]  297 	rrcw	x
      000152 4A               [ 1]  298 	dec	a
      000153 26 FA            [ 1]  299 	jrne	00104$
      000155 9E               [ 1]  300 	ld	a, xh
      000156 A4 3F            [ 1]  301 	and	a, #0x3f
      000158 95               [ 1]  302 	ld	xh, a
      000159 CFu00u07         [ 2]  303 	ldw	_AD_REG_VAL+2, x
                                    304 ;	AD9833.c: 68: AD9833_WriteReg(AD_REG_FREQ0);
      00015C 4B 01            [ 1]  305 	push	#0x01
      00015E CDr00r82         [ 4]  306 	call	_AD9833_WriteReg
                                    307 ;	AD9833.c: 69: }
      000161 5B 05            [ 2]  308 	addw	sp, #5
      000163 81               [ 4]  309 	ret
                                    310 ;	AD9833.c: 71: void AD9833_SetPhase(float phase)
                                    311 ;	-----------------------------------------
                                    312 ;	 function AD9833_SetPhase
                                    313 ;	-----------------------------------------
      000164                        314 _AD9833_SetPhase:
                                    315 ;	AD9833.c: 73: AD_REG_VAL[AD_REG_PHASE0] = calcPhase(phase);
      000164 1E 05            [ 2]  316 	ldw	x, (0x05, sp)
      000166 16 03            [ 2]  317 	ldw	y, (0x03, sp)
                                    318 ;	./AD9833_reg.h: 12: static inline uint16_t calcPhase(float phase){return (uint16_t)((512.0 * (phase/10) / 45) + 0.5);}
      000168 4B 00            [ 1]  319 	push	#0x00
      00016A 4B 00            [ 1]  320 	push	#0x00
      00016C 4B 20            [ 1]  321 	push	#0x20
      00016E 4B 41            [ 1]  322 	push	#0x41
      000170 89               [ 2]  323 	pushw	x
      000171 90 89            [ 2]  324 	pushw	y
      000173 CDr00r00         [ 4]  325 	call	___fsdiv
      000176 5B 08            [ 2]  326 	addw	sp, #8
      000178 89               [ 2]  327 	pushw	x
      000179 90 89            [ 2]  328 	pushw	y
      00017B 5F               [ 1]  329 	clrw	x
      00017C 89               [ 2]  330 	pushw	x
      00017D 4B 00            [ 1]  331 	push	#0x00
      00017F 4B 44            [ 1]  332 	push	#0x44
      000181 CDr00r00         [ 4]  333 	call	___fsmul
      000184 5B 08            [ 2]  334 	addw	sp, #8
      000186 4B 00            [ 1]  335 	push	#0x00
      000188 4B 00            [ 1]  336 	push	#0x00
      00018A 4B 34            [ 1]  337 	push	#0x34
      00018C 4B 42            [ 1]  338 	push	#0x42
      00018E 89               [ 2]  339 	pushw	x
      00018F 90 89            [ 2]  340 	pushw	y
      000191 CDr00r00         [ 4]  341 	call	___fsdiv
      000194 5B 08            [ 2]  342 	addw	sp, #8
      000196 4B 00            [ 1]  343 	push	#0x00
      000198 4B 00            [ 1]  344 	push	#0x00
      00019A 4B 00            [ 1]  345 	push	#0x00
      00019C 4B 3F            [ 1]  346 	push	#0x3f
      00019E 89               [ 2]  347 	pushw	x
      00019F 90 89            [ 2]  348 	pushw	y
      0001A1 CDr00r00         [ 4]  349 	call	___fsadd
      0001A4 5B 08            [ 2]  350 	addw	sp, #8
      0001A6 89               [ 2]  351 	pushw	x
      0001A7 90 89            [ 2]  352 	pushw	y
      0001A9 CDr00r00         [ 4]  353 	call	___fs2uint
      0001AC 5B 04            [ 2]  354 	addw	sp, #4
                                    355 ;	AD9833.c: 73: AD_REG_VAL[AD_REG_PHASE0] = calcPhase(phase);
      0001AE CFu00u0B         [ 2]  356 	ldw	_AD_REG_VAL+6, x
                                    357 ;	AD9833.c: 74: AD9833_WriteReg(AD_REG_PHASE0);
      0001B1 4B 03            [ 1]  358 	push	#0x03
      0001B3 CDr00r82         [ 4]  359 	call	_AD9833_WriteReg
      0001B6 84               [ 1]  360 	pop	a
                                    361 ;	AD9833.c: 75: }
      0001B7 81               [ 4]  362 	ret
                                    363 ;	AD9833.c: 77: void AD9833_SetMode(uint8_t mode)
                                    364 ;	-----------------------------------------
                                    365 ;	 function AD9833_SetMode
                                    366 ;	-----------------------------------------
      0001B8                        367 _AD9833_SetMode:
                                    368 ;	AD9833.c: 79: switch(mode){
      0001B8 7B 03            [ 1]  369 	ld	a, (0x03, sp)
      0001BA A1 00            [ 1]  370 	cp	a, #0x00
      0001BC 27 13            [ 1]  371 	jreq	00101$
      0001BE 7B 03            [ 1]  372 	ld	a, (0x03, sp)
      0001C0 4A               [ 1]  373 	dec	a
      0001C1 27 1A            [ 1]  374 	jreq	00102$
      0001C3 7B 03            [ 1]  375 	ld	a, (0x03, sp)
      0001C5 A1 02            [ 1]  376 	cp	a, #0x02
      0001C7 27 27            [ 1]  377 	jreq	00103$
      0001C9 7B 03            [ 1]  378 	ld	a, (0x03, sp)
      0001CB A1 03            [ 1]  379 	cp	a, #0x03
      0001CD 27 34            [ 1]  380 	jreq	00104$
      0001CF 20 43            [ 2]  381 	jra	00105$
                                    382 ;	AD9833.c: 80: case SINE     : //SIN : OPBITEN=0, MODE=0, DIV2=x
      0001D1                        383 00101$:
                                    384 ;	AD9833.c: 81: BITS_RST(AD_REG_VAL[AD_REG_CTL], (BIT(AD_CTL_MODE)|BIT(AD_CTL_OPBITEN)));
      0001D1 CEu00u05         [ 2]  385 	ldw	x, _AD_REG_VAL+0
      0001D4 9F               [ 1]  386 	ld	a, xl
      0001D5 A4 DD            [ 1]  387 	and	a, #0xdd
      0001D7 97               [ 1]  388 	ld	xl, a
      0001D8 CFu00u05         [ 2]  389 	ldw	_AD_REG_VAL+0, x
                                    390 ;	AD9833.c: 82: break;
      0001DB 20 37            [ 2]  391 	jra	00105$
                                    392 ;	AD9833.c: 83: case TRIANGLE : //TRIANGLE : OPBITEN=0, MODE=1, DIV2=x
      0001DD                        393 00102$:
                                    394 ;	AD9833.c: 84: BIT_SET(AD_REG_VAL[AD_REG_CTL],AD_CTL_MODE);
      0001DD CEu00u05         [ 2]  395 	ldw	x, _AD_REG_VAL+0
      0001E0 9F               [ 1]  396 	ld	a, xl
      0001E1 AA 02            [ 1]  397 	or	a, #0x02
      0001E3 97               [ 1]  398 	ld	xl, a
      0001E4 CFu00u05         [ 2]  399 	ldw	_AD_REG_VAL+0, x
                                    400 ;	AD9833.c: 85: BIT_RST(AD_REG_VAL[AD_REG_CTL],AD_CTL_OPBITEN);
      0001E7 9F               [ 1]  401 	ld	a, xl
      0001E8 A4 DF            [ 1]  402 	and	a, #0xdf
      0001EA 97               [ 1]  403 	ld	xl, a
      0001EB CFu00u05         [ 2]  404 	ldw	_AD_REG_VAL+0, x
                                    405 ;	AD9833.c: 86: break;
      0001EE 20 24            [ 2]  406 	jra	00105$
                                    407 ;	AD9833.c: 87: case SQUARE   : //SQUARE : OPBITEN=1, MODE=0, DIV2=0
      0001F0                        408 00103$:
                                    409 ;	AD9833.c: 88: BIT_SET(AD_REG_VAL[AD_REG_CTL],AD_CTL_OPBITEN);
      0001F0 CEu00u05         [ 2]  410 	ldw	x, _AD_REG_VAL+0
      0001F3 9F               [ 1]  411 	ld	a, xl
      0001F4 AA 20            [ 1]  412 	or	a, #0x20
      0001F6 97               [ 1]  413 	ld	xl, a
      0001F7 CFu00u05         [ 2]  414 	ldw	_AD_REG_VAL+0, x
                                    415 ;	AD9833.c: 89: BITS_RST(AD_REG_VAL[AD_REG_CTL],(BIT(AD_CTL_MODE)|BIT(AD_CTL_DIV2)));
      0001FA 9F               [ 1]  416 	ld	a, xl
      0001FB A4 F5            [ 1]  417 	and	a, #0xf5
      0001FD 97               [ 1]  418 	ld	xl, a
      0001FE CFu00u05         [ 2]  419 	ldw	_AD_REG_VAL+0, x
                                    420 ;	AD9833.c: 90: break;
      000201 20 11            [ 2]  421 	jra	00105$
                                    422 ;	AD9833.c: 91: case SQUARE2  : //SQUARE2 : OPBITEN=1, MODE=0, DIV2=1
      000203                        423 00104$:
                                    424 ;	AD9833.c: 92: BITS_SET(AD_REG_VAL[AD_REG_CTL],(BIT(AD_CTL_OPBITEN)|BIT(AD_CTL_MODE)));
      000203 CEu00u05         [ 2]  425 	ldw	x, _AD_REG_VAL+0
      000206 9F               [ 1]  426 	ld	a, xl
      000207 AA 22            [ 1]  427 	or	a, #0x22
      000209 97               [ 1]  428 	ld	xl, a
      00020A CFu00u05         [ 2]  429 	ldw	_AD_REG_VAL+0, x
                                    430 ;	AD9833.c: 93: BIT_RST(AD_REG_VAL[AD_REG_CTL],AD_CTL_DIV2);
      00020D 9F               [ 1]  431 	ld	a, xl
      00020E A4 F7            [ 1]  432 	and	a, #0xf7
      000210 97               [ 1]  433 	ld	xl, a
      000211 CFu00u05         [ 2]  434 	ldw	_AD_REG_VAL+0, x
                                    435 ;	AD9833.c: 95: }
      000214                        436 00105$:
                                    437 ;	AD9833.c: 96: AD9833_WriteReg(AD_REG_CTL);
      000214 4B 00            [ 1]  438 	push	#0x00
      000216 CDr00r82         [ 4]  439 	call	_AD9833_WriteReg
      000219 84               [ 1]  440 	pop	a
                                    441 ;	AD9833.c: 97: }
      00021A 81               [ 4]  442 	ret
                                    443 	.area CODE
                                    444 	.area CONST
      000000                        445 _AWU_Init_APR_Array_65536_122:
      000000 00                     446 	.db #0x00	; 0
      000001 1E                     447 	.db #0x1e	; 30
      000002 1E                     448 	.db #0x1e	; 30
      000003 1E                     449 	.db #0x1e	; 30
      000004 1E                     450 	.db #0x1e	; 30
      000005 1E                     451 	.db #0x1e	; 30
      000006 1E                     452 	.db #0x1e	; 30
      000007 1E                     453 	.db #0x1e	; 30
      000008 1E                     454 	.db #0x1e	; 30
      000009 1E                     455 	.db #0x1e	; 30
      00000A 1E                     456 	.db #0x1e	; 30
      00000B 1E                     457 	.db #0x1e	; 30
      00000C 1E                     458 	.db #0x1e	; 30
      00000D 3D                     459 	.db #0x3d	; 61
      00000E 17                     460 	.db #0x17	; 23
      00000F 17                     461 	.db #0x17	; 23
      000010 3E                     462 	.db #0x3e	; 62
      000011                        463 _AWU_Init_TBR_Array_65536_122:
      000011 00                     464 	.db #0x00	; 0
      000012 01                     465 	.db #0x01	; 1
      000013 02                     466 	.db #0x02	; 2
      000014 03                     467 	.db #0x03	; 3
      000015 04                     468 	.db #0x04	; 4
      000016 05                     469 	.db #0x05	; 5
      000017 06                     470 	.db #0x06	; 6
      000018 07                     471 	.db #0x07	; 7
      000019 08                     472 	.db #0x08	; 8
      00001A 09                     473 	.db #0x09	; 9
      00001B 0A                     474 	.db #0x0a	; 10
      00001C 0B                     475 	.db #0x0b	; 11
      00001D 0C                     476 	.db #0x0c	; 12
      00001E 0C                     477 	.db #0x0c	; 12
      00001F 0E                     478 	.db #0x0e	; 14
      000020 0F                     479 	.db #0x0f	; 15
      000021 0F                     480 	.db #0x0f	; 15
                                    481 	.area INITIALIZER
      000000                        482 __xinit__AD_REG_ADDRESS:
      000000 00                     483 	.db #0x00	; 0
      000001 40                     484 	.db #0x40	; 64
      000002 80                     485 	.db #0x80	; 128
      000003 C0                     486 	.db #0xc0	; 192
      000004 E0                     487 	.db #0xe0	; 224
      000005                        488 __xinit__AD_REG_VAL:
      000005 00 00                  489 	.dw #0x0000
      000007 00 00                  490 	.dw #0x0000
      000009 00 00                  491 	.dw #0x0000
      00000B 00 00                  492 	.dw #0x0000
      00000D 00 00                  493 	.dw #0x0000
                                    494 	.area CABS (ABS)
